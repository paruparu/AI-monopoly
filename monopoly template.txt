<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>マルチプレイヤー・モノポリー (CPU交渉機能付き)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=M+PLUS+Rounded+1c:wght@400;700;800&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'M PLUS Rounded 1c', sans-serif; }
        .game-layout { display: flex; flex-direction: column; align-items: flex-start; gap: 20px; }
        @media (min-width: 1280px) { .game-layout { flex-direction: row; } }
        .board {
            display: grid;
            grid-template-columns: 100px repeat(9, minmax(60px, 1fr)) 100px;
            grid-template-rows: 100px repeat(9, minmax(60px, 1fr)) 100px;
            gap: 2px; width: 100%; max-width: 800px; background-color: #1a202c;
            border: 4px solid #1a202c; border-radius: 10px; aspect-ratio: 1 / 1;
        }
        .space {
            background-color: #f0f8ff; border: 1px solid #cbd5e0; position: relative; display: flex;
            flex-direction: column; justify-content: space-between; align-items: center;
            padding: 2px; font-size: 10px; text-align: center; overflow: hidden; cursor: pointer;
        }
        .space .space-name { flex-grow: 1; display: flex; align-items: center; justify-content: center; font-weight: bold; }
        .space .price { font-size: 9px; }
        .color-bar { width: 100%; height: 20%; flex-shrink: 0; }
        #space-0 { grid-area: 11 / 11 / 12 / 12; } #space-1 { grid-area: 11 / 10 / 12 / 11; }
        #space-2 { grid-area: 11 / 9 / 12 / 10; } #space-3 { grid-area: 11 / 8 / 12 / 9; }
        #space-4 { grid-area: 11 / 7 / 12 / 8; } #space-5 { grid-area: 11 / 6 / 12 / 7; }
        #space-6 { grid-area: 11 / 5 / 12 / 6; } #space-7 { grid-area: 11 / 4 / 12 / 5; }
        #space-8 { grid-area: 11 / 3 / 12 / 4; } #space-9 { grid-area: 11 / 2 / 12 / 3; }
        #space-10 { grid-area: 11 / 1 / 12 / 2; } #space-11 { grid-area: 10 / 1 / 11 / 2; }
        #space-12 { grid-area: 9 / 1 / 10 / 2; } #space-13 { grid-area: 8 / 1 / 9 / 2; }
        #space-14 { grid-area: 7 / 1 / 8 / 2; } #space-15 { grid-area: 6 / 1 / 7 / 2; }
        #space-16 { grid-area: 5 / 1 / 6 / 2; } #space-17 { grid-area: 4 / 1 / 5 / 2; }
        #space-18 { grid-area: 3 / 1 / 4 / 2; } #space-19 { grid-area: 2 / 1 / 3 / 2; }
        #space-20 { grid-area: 1 / 1 / 2 / 2; } #space-21 { grid-area: 1 / 2 / 2 / 3; }
        #space-22 { grid-area: 1 / 3 / 2 / 4; } #space-23 { grid-area: 1 / 4 / 2 / 5; }
        #space-24 { grid-area: 1 / 5 / 2 / 6; } #space-25 { grid-area: 1 / 6 / 2 / 7; }
        #space-26 { grid-area: 1 / 7 / 2 / 8; } #space-27 { grid-area: 1 / 8 / 2 / 9; }
        #space-28 { grid-area: 1 / 9 / 2 / 10; } #space-29 { grid-area: 1 / 10 / 2 / 11; }
        #space-30 { grid-area: 1 / 11 / 2 / 12; } #space-31 { grid-area: 2 / 11 / 3 / 12; }
        #space-32 { grid-area: 3 / 11 / 4 / 12; } #space-33 { grid-area: 4 / 11 / 5 / 12; }
        #space-34 { grid-area: 5 / 11 / 6 / 12; } #space-35 { grid-area: 6 / 11 / 7 / 12; }
        #space-36 { grid-area: 7 / 11 / 8 / 12; } #space-37 { grid-area: 8 / 11 / 9 / 12; }
        #space-38 { grid-area: 9 / 11 / 10 / 12; } #space-39 { grid-area: 10 / 11 / 11 / 12; }
        #board-center { grid-area: 2 / 2 / 11 / 11; background-color: #cde8d5; display: flex; justify-content: center; align-items: center; font-size: 2rem; font-weight: bold; color: #2f4f4f; border-radius: 5px;}
        .player-token { position: absolute; width: 20px; height: 20px; border: 2px solid white; border-radius: 50%; z-index: 10; transition: all 0.5s ease-in-out; box-shadow: 0 0 5px black; }
        .owned-indicator { position: absolute; bottom: 2px; right: 2px; width: 15px; height: 15px; border-radius: 50%; border: 1px solid white; box-shadow: 0 0 3px black; }
        .house-indicator { position: absolute; top: 0px; left: 0px; width: 100%; display: flex; justify-content: center; gap: 1px; }
        .house-icon { width: 10px; height: 10px; background-color: green; border: 1px solid white; }
        .hotel-icon { width: 15px; height: 15px; background-color: red; border: 1px solid white; font-size: 10px; color: white; text-align: center; font-weight: bold; }
        .modal { transition: opacity 0.3s ease; }
        .trade-property-list { max-height: 150px; overflow-y: auto; border: 1px solid #ccc; padding: 5px; border-radius: 5px; }
        .trade-property-list label { display: block; margin-bottom: 5px; cursor: pointer; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 flex flex-col items-center p-4">

    <h1 class="text-4xl font-extrabold mb-4 text-gray-700">AI交渉モノポリー</h1>

    <div class="game-layout w-full max-w-screen-2xl">
        <div id="board" class="board"><div id="board-center">日本周遊</div></div>
        <div class="info-panel flex-grow w-full xl:max-w-md bg-white p-4 rounded-lg shadow-lg">
            <div id="players-info-container" class="mb-4">
                <h2 class="text-2xl font-bold border-b-2 pb-2 mb-2">プレイヤー情報</h2>
            </div>
            <div class="action-area bg-gray-100 p-4 rounded-lg shadow-inner">
                <h3 id="turn-indicator" class="text-xl font-bold text-center mb-4">あなたの番です</h3>
                <div id="action-panel" class="mb-4 text-center hidden">
                    <h4 id="action-title" class="font-bold"></h4><p id="action-text" class="my-2"></p>
                    <div id="action-buttons">
                        <button id="action-buy-btn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">購入</button>
                        <button id="action-pass-btn" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">やめる</button>
                    </div>
                </div>
                <div id="dice-area" class="text-center">
                    <div class="flex justify-center gap-4 mb-2">
                        <div id="dice1" class="w-12 h-12 bg-white rounded-lg flex items-center justify-center text-2xl font-bold shadow-lg">?</div>
                        <div id="dice2" class="w-12 h-12 bg-white rounded-lg flex items-center justify-center text-2xl font-bold shadow-lg">?</div>
                    </div>
                    <div class="flex gap-2 mt-2">
                        <button id="roll-dice-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-xl w-full">サイコロを振る</button>
                        <button id="manage-assets-btn" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg shadow-xl w-full">資産管理</button>
                    </div>
                </div>
            </div>
            <div id="log-area" class="w-full mt-4">
                <h3 class="font-bold text-center">ゲームログ</h3>
                <div id="log-messages" class="h-48 overflow-y-auto text-sm p-2 bg-gray-100 rounded shadow-inner"></div>
            </div>
        </div>
    </div>
    
    <div id="property-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
        <div class="bg-white p-6 rounded-lg shadow-2xl max-w-sm w-full"><div id="modal-color-bar" class="w-full h-4 rounded-t-lg mb-4"></div><h3 id="modal-property-name" class="text-3xl font-bold mb-2 text-center"></h3><div id="modal-property-info" class="text-lg space-y-2"></div><button id="modal-close-btn" class="mt-6 w-full bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">閉じる</button></div>
    </div>
    
    <div id="manage-assets-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
        <div class="bg-white p-6 rounded-lg shadow-2xl max-w-lg w-full">
            <h3 class="text-2xl font-bold mb-4">資産管理 (建築)</h3>
            <div id="asset-groups-container" class="max-h-96 overflow-y-auto space-y-4"></div>
            <button id="manage-assets-close-btn" class="mt-6 w-full bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">閉じる</button>
        </div>
    </div>

    <div id="trade-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
        <div class="bg-white p-6 rounded-lg shadow-2xl max-w-2xl w-full">
            <h3 id="trade-modal-title" class="text-2xl font-bold mb-4">交渉</h3>
            <div id="trade-cpu-response" class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4 hidden" role="alert"></div>
            <div class="grid grid-cols-2 gap-6">
                <div><h4 class="font-bold text-lg mb-2" id="trade-your-offer-title">あなたの提示</h4><div class="trade-property-list bg-gray-50" id="trade-your-properties"></div><div class="mt-2">現金: ¥ <input type="number" id="trade-your-money" class="w-32 border rounded p-1" value="0" min="0"></div></div>
                <div><h4 class="font-bold text-lg mb-2" id="trade-their-offer-title">相手の提示</h4><div class="trade-property-list bg-gray-50" id="trade-their-properties"></div><div class="mt-2">現金: ¥ <input type="number" id="trade-their-money" class="w-32 border rounded p-1" value="0" min="0"></div></div>
            </div>
            <div class="mt-4"><label for="trade-message" class="font-bold">メッセージ:</label><textarea id="trade-message" class="w-full border rounded p-2 mt-1" placeholder="CPUへのメッセージを入力..."></textarea></div>
            <div class="mt-6 flex justify-end gap-4"><button id="trade-cancel-btn" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">やめる</button><button id="trade-propose-btn" class="bg-green-600 hover:bg-green-800 text-white font-bold py-2 px-4 rounded">提案する</button></div>
        </div>
    </div>
    
    <!-- CPU Offer Modal -->
    <div id="cpu-offer-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
        <div class="bg-white p-6 rounded-lg shadow-2xl max-w-lg w-full">
            <h3 id="cpu-offer-title" class="text-2xl font-bold mb-4">交渉の提案</h3>
            <p id="cpu-offer-text" class="mb-4"></p>
            <div class="grid grid-cols-2 gap-6 bg-gray-50 p-4 rounded-lg">
                <div><h4 class="font-bold text-lg mb-2">要求されている資産</h4><div id="cpu-offer-request"></div></div>
                <div><h4 class="font-bold text-lg mb-2">提示されている資産</h4><div id="cpu-offer-proposal"></div></div>
            </div>
            <div class="mt-6 flex justify-end gap-4">
                <button id="cpu-offer-reject-btn" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">拒否</button>
                <button id="cpu-offer-counter-btn" class="bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded">再提案</button>
                <button id="cpu-offer-accept-btn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">承諾</button>
            </div>
        </div>
    </div>


    <script>
        // --- Game Data ---
        const boardData = [ { name: 'GO', type: 'go' }, { name: '沖縄', price: 6000, rentLevels: [200, 1000, 3000, 9000, 16000, 25000], color: '#a52a2a', houseCost: 5000 }, { name: 'チャンス', type: 'chance' }, { name: '福岡', price: 6000, rentLevels: [400, 2000, 6000, 18000, 32000, 45000], color: '#a52a2a', houseCost: 5000 }, { name: '所得税', type: 'tax', amount: 20000 }, { name: '鉄道:南', price: 20000, rent: 2500, type: 'railroad' }, { name: '大阪', price: 10000, rentLevels: [600, 3000, 9000, 27000, 40000, 55000], color: '#add8e6', houseCost: 5000 }, { name: 'チャンス', type: 'chance' }, { name: '京都', price: 10000, rentLevels: [600, 3000, 9000, 27000, 40000, 55000], color: '#add8e6', houseCost: 5000 }, { name: '名古屋', price: 12000, rentLevels: [800, 4000, 10000, 30000, 45000, 60000], color: '#add8e6', houseCost: 5000 }, { name: '刑務所', type: 'jail' }, { name: '静岡', price: 14000, rentLevels: [1000, 5000, 15000, 45000, 62500, 75000], color: '#d8bfd8', houseCost: 10000 }, { name: '電力会社', price: 15000, type: 'utility' }, { name: '横浜', price: 14000, rentLevels: [1000, 5000, 15000, 45000, 62500, 75000], color: '#d8bfd8', houseCost: 10000 }, { name: '千葉', price: 16000, rentLevels: [1200, 6000, 18000, 50000, 70000, 90000], color: '#d8bfd8', houseCost: 10000 }, { name: '鉄道:西', price: 20000, rent: 2500, type: 'railroad' }, { name: '埼玉', price: 18000, rentLevels: [1400, 7000, 20000, 55000, 75000, 95000], color: '#ffa500', houseCost: 10000 }, { name: 'チャンス', type: 'chance' }, { name: '神奈川', price: 18000, rentLevels: [1400, 7000, 20000, 55000, 75000, 95000], color: '#ffa500', houseCost: 10000 }, { name: '東京', price: 20000, rentLevels: [1600, 8000, 22000, 60000, 80000, 100000], color: '#ffa500', houseCost: 10000 }, { name: '駐車場', type: 'parking' }, { name: '新潟', price: 22000, rentLevels: [1800, 9000, 25000, 70000, 87500, 105000], color: '#ff0000', houseCost: 15000 }, { name: 'チャンス', type: 'chance' }, { name: '仙台', price: 22000, rentLevels: [1800, 9000, 25000, 70000, 87500, 105000], color: '#ff0000', houseCost: 15000 }, { name: '青森', price: 24000, rentLevels: [2000, 10000, 30000, 75000, 92500, 110000], color: '#ff0000', houseCost: 15000 }, { name: '鉄道:北', price: 20000, rent: 2500, type: 'railroad' }, { name: '秋田', price: 26000, rentLevels: [2200, 11000, 33000, 80000, 97500, 115000], color: '#ffff00', houseCost: 15000 }, { name: '岩手', price: 26000, rentLevels: [2200, 11000, 33000, 80000, 97500, 115000], color: '#ffff00', houseCost: 15000 }, { name: '水道会社', price: 15000, type: 'utility' }, { name: '札幌', price: 28000, rentLevels: [2400, 12000, 36000, 85000, 102500, 120000], color: '#ffff00', houseCost: 15000 }, { name: '刑務所へ行け', type: 'go_to_jail' }, { name: '山梨', price: 30000, rentLevels: [2600, 13000, 39000, 90000, 110000, 127500], color: '#008000', houseCost: 20000 }, { name: '長野', price: 30000, rentLevels: [2600, 13000, 39000, 90000, 110000, 127500], color: '#008000', houseCost: 20000 }, { name: 'チャンス', type: 'chance' }, { name: '銀座', price: 32000, rentLevels: [2800, 15000, 45000, 100000, 120000, 140000], color: '#008000', houseCost: 20000 }, { name: '鉄道:東', price: 20000, rent: 2500, type: 'railroad' }, { name: 'チャンス', type: 'chance' }, { name: '渋谷', price: 35000, rentLevels: [3500, 17500, 50000, 110000, 130000, 150000], color: '#0000ff', houseCost: 20000 }, { name: '物品税', type: 'tax', amount: 10000 }, { name: '新宿', price: 40000, rentLevels: [5000, 20000, 60000, 140000, 170000, 200000], color: '#0000ff', houseCost: 20000 } ];
        const chanceCards = [ { text: "銀行から配当金 ¥5000 を受け取る。", action: (p) => { p.money += 5000; addLog(`${p.name} は配当金 ¥5,000 を受け取った。`); } }, { text: "GOマスに進む。", action: (p, allPlayers) => { moveTo(p, 0, true); handleLanding(p, allPlayers); } }, { text: "修繕費として ¥3000 支払う。", action: (p) => { p.money -= 3000; addLog(`${p.name} は修繕費 ¥3,000 を支払った。`); } }, { text: "一番近い鉄道まで進む。", action: (p, allPlayers) => advanceToNearest(p, 'railroad', allPlayers) }, { text: "刑務所から釈放されるカード。", action: (p) => { p.getOutOfJailFree = true; addLog(`${p.name} は「刑務所から釈放」カードを手に入れた！`);} }, { text: "3マス戻る。", action: (p, allPlayers) => { moveTo(p, (p.position - 3 + 40) % 40, false); handleLanding(p, allPlayers); } }, ];
        let players = []; let currentPlayerIndex = 0; let isGameOver = false; const NUM_PLAYERS = 3; let tradePartnerId = null; let activeCpuOffer = null; let isCounteringCpuOffer = false;
        const DOM = {}; // Centralized DOM elements

        function cacheDomElements() {
            const ids = ['board', 'players-info-container', 'roll-dice-btn', 'dice1', 'dice2', 'log-messages', 'turn-indicator', 'action-panel', 'action-title', 'action-text', 'action-buy-btn', 'action-pass-btn', 'property-modal', 'modal-color-bar', 'modal-property-name', 'modal-property-info', 'modal-close-btn', 'trade-modal', 'trade-modal-title', 'trade-cpu-response', 'trade-your-properties', 'trade-their-properties', 'trade-your-money', 'trade-their-money', 'trade-message', 'trade-cancel-btn', 'trade-propose-btn', 'manage-assets-btn', 'manage-assets-modal', 'asset-groups-container', 'manage-assets-close-btn', 'cpu-offer-modal', 'cpu-offer-title', 'cpu-offer-text', 'cpu-offer-request', 'cpu-offer-proposal', 'cpu-offer-reject-btn', 'cpu-offer-counter-btn', 'cpu-offer-accept-btn'];
            ids.forEach(id => DOM[id.replace(/-/g, '')] = document.getElementById(id));
        }

        // --- Game Logic ---
        function initGame() {
            cacheDomElements();
            boardData.forEach(space => { if (space.price) { space.owner = -1; space.houses = 0; }});
            drawBoard();
            players = [];
            players.push({ id: 0, name: 'あなた', type: 'human', money: 150000, position: 0, properties: [], inJail: false, jailTurns: 0, getOutOfJailFree: false, tokenElement: null, color: '#ef4444' });
            players.push({ id: 1, name: 'CPU 1', type: 'cpu', money: 150000, position: 0, properties: [], inJail: false, jailTurns: 0, getOutOfJailFree: false, tokenElement: null, color: '#3b82f6' });
            players.push({ id: 2, name: 'CPU 2', type: 'cpu', money: 150000, position: 0, properties: [], inJail: false, jailTurns: 0, getOutOfJailFree: false, tokenElement: null, color: '#22c55e' });
            players.forEach(p => { createPlayerToken(p); drawPlayerInfo(p); });
            addEventListeners();
            addLog("ようこそ！AI交渉モノポリーへ！");
            startTurn();
        }
        
        function addEventListeners() {
            DOM.modalclosebtn.addEventListener('click', () => DOM.propertymodal.classList.add('hidden'));
            DOM.tradecancelbtn.addEventListener('click', handleTradeCancel);
            DOM.tradeproposebtn.addEventListener('click', handleTradeProposal);
            DOM.rolldicebtn.addEventListener('click', () => { const p = players[currentPlayerIndex]; if(p.type === 'human' && !DOM.rolldicebtn.disabled) rollDiceAndMove(p); });
            DOM.manageassetsbtn.addEventListener('click', openManageAssetsModal);
            DOM.manageassetsclosebtn.addEventListener('click', () => DOM.manageassetsmodal.classList.add('hidden'));
            DOM.cpuofferacceptbtn.addEventListener('click', handleCpuOfferAccept);
            DOM.cpuofferrejectbtn.addEventListener('click', handleCpuOfferReject);
            DOM.cpuoffercounterbtn.addEventListener('click', handleCpuOfferCounter);
        }

        function drawBoard() {
            boardData.forEach((spaceData, i) => {
                const spaceEl = document.createElement('div'); spaceEl.id = `space-${i}`; spaceEl.className = 'space';
                let content = `<div class="space-name">${spaceData.name}</div>`;
                if(spaceData.color) content = `<div class="color-bar" style="background-color:${spaceData.color};"></div>` + content;
                if (spaceData.price) content += `<div class="price">¥${spaceData.price.toLocaleString()}</div>`;
                if (spaceData.type === 'tax') content += `<div class="price">支払い ¥${spaceData.amount.toLocaleString()}</div>`;
                spaceEl.innerHTML = content; spaceEl.addEventListener('click', () => showPropertyModal(i)); DOM.board.appendChild(spaceEl);
            });
        }
        function createPlayerToken(player) {
            player.tokenElement = document.createElement('div'); player.tokenElement.className = 'player-token';
            player.tokenElement.style.backgroundColor = player.color;
            player.tokenElement.style.transform = `translate(${-50 + player.id * 10}%, -50%)`;
            document.getElementById('space-0').appendChild(player.tokenElement);
        }
        function drawPlayerInfo(player) {
            let container = document.getElementById(`player-info-${player.id}`);
            if (!container) { container = document.createElement('div'); container.id = `player-info-${player.id}`; container.className = 'p-2 rounded-lg mb-2'; DOM.playersinfocontainer.appendChild(container); }
            container.style.border = `2px solid ${player.color}`;
            const propertiesHTML = player.properties.map(p_idx => `<span class="inline-block rounded px-1 text-xs mr-1 mb-1" style="background-color:${boardData[p_idx].color || '#ccc'}">${boardData[p_idx].name}</span>`).join('') || 'なし';
            const jailCardHTML = player.getOutOfJailFree ? `<div class="font-bold text-sm text-yellow-600">Jail Free カード有り</div>` : '';
            const tradeButtonHTML = player.type === 'cpu' ? `<button class="trade-btn text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-700" data-playerid="${player.id}">交渉</button>` : '';
            container.innerHTML = `<div class="flex justify-between items-start"><h3 class="font-bold text-lg" style="color:${player.color}">${player.name}</h3><div class="flex items-center gap-2">${jailCardHTML}${tradeButtonHTML}</div></div><p>所持金: <span class="font-bold">¥${player.money.toLocaleString()}</span></p><div class="mt-1">${propertiesHTML}</div>`;
            container.querySelectorAll('.trade-btn').forEach(btn => btn.addEventListener('click', (e) => openTradeModal(e.target.dataset.playerid)));
        }
        function addLog(message) { const msgEl = document.createElement('p'); msgEl.innerHTML = message; DOM.logmessages.prepend(msgEl); }
        function updateUI() {
            players.forEach(drawPlayerInfo);
            boardData.forEach((space, i) => {
                const spaceEl = document.getElementById(`space-${i}`);
                let ownerIndicator = spaceEl.querySelector('.owned-indicator');
                if (space.owner >= 0) {
                    if (!ownerIndicator) { ownerIndicator = document.createElement('div'); ownerIndicator.className = 'owned-indicator'; spaceEl.appendChild(ownerIndicator); }
                    ownerIndicator.style.backgroundColor = players[space.owner].color;
                } else if (ownerIndicator) { ownerIndicator.remove(); }
                
                let houseIndicator = spaceEl.querySelector('.house-indicator');
                if (space.houses > 0) {
                    if (!houseIndicator) { houseIndicator = document.createElement('div'); houseIndicator.className = 'house-indicator'; spaceEl.prepend(houseIndicator); }
                    houseIndicator.innerHTML = '';
                    if (space.houses === 5) { houseIndicator.innerHTML = '<div class="hotel-icon">H</div>'; }
                    else { for(let i=0; i < space.houses; i++) houseIndicator.innerHTML += '<div class="house-icon"></div>'; }
                } else if (houseIndicator) { houseIndicator.remove(); }
            });
            checkGameOver();
        }
        function movePlayerToken(player) { document.getElementById(`space-${player.position}`).appendChild(player.tokenElement); }
        function startTurn() {
            if (isGameOver) return;
            const currentPlayer = players[currentPlayerIndex];
            DOM.turnindicator.textContent = `${currentPlayer.name} の番です`; DOM.turnindicator.style.color = currentPlayer.color;
            DOM.actionpanel.classList.add('hidden');
            if (currentPlayer.money < 0) { addLog(`<span style="color:${currentPlayer.color}; font-weight: bold;">${currentPlayer.name}</span>は破産しました。`); nextTurn(); return; }
            if (currentPlayer.type === 'human') { DOM.rolldicebtn.disabled = false; DOM.manageassetsbtn.disabled = false; }
            else { DOM.rolldicebtn.disabled = true; DOM.manageassetsbtn.disabled = true; setTimeout(() => cpuTurn(currentPlayer), 500); }
        }
        function nextTurn() { currentPlayerIndex = (currentPlayerIndex + 1) % NUM_PLAYERS; startTurn(); }
        
        async function cpuTurn(player) {
            if (player.money < 0) { nextTurn(); return; }
            const tradeAction = await cpuCheckForTrade(player);
            if (tradeAction.shouldTrade) {
                if (tradeAction.targetPlayer.type === 'human') {
                    presentCpuOfferToPlayer(player, tradeAction.targetPlayer, tradeAction.offer, tradeAction.request);
                    return; // Pause turn, wait for human response
                } else {
                    handleCpuToCpuTrade(player, tradeAction.targetPlayer, tradeAction.offer, tradeAction.request);
                    setTimeout(() => { addLog(`🤖 ${player.name} がサイコロを振ります...`); rollDiceAndMove(player); }, 1000); // Continue turn after trade attempt
                }
            } else {
                addLog(`🤖 ${player.name} がサイコロを振ります...`);
                rollDiceAndMove(player);
            }
        }

        function rollDiceAndMove(player) {
            DOM.rolldicebtn.disabled = true; DOM.manageassetsbtn.disabled = true;
            const d1 = Math.floor(Math.random() * 6) + 1, d2 = Math.floor(Math.random() * 6) + 1;
            DOM.dice1.textContent = d1; DOM.dice2.textContent = d2; const totalRoll = d1 + d2;
            addLog(`${player.name} は ${totalRoll} 進みます。`); moveTo(player, (player.position + totalRoll) % 40, true);
            setTimeout(() => handleLanding(player, players), 600);
        }
        function moveTo(player, newPosition, passedGoCheck) {
            const oldPosition = player.position; player.position = newPosition;
            if (passedGoCheck && player.position < oldPosition) { addLog(`${player.name} はGOを通過し、¥20,000 を受け取った！`); player.money += 20000; }
            movePlayerToken(player); updateUI();
        }
        function handleLanding(player, allPlayers) {
            const space = boardData[player.position]; addLog(`${player.name} は <strong>${space.name}</strong> に止まりました。`);
            switch (space.type) {
                case 'railroad': case 'utility': case undefined:
                    if (space.owner === -1) promptToBuy(player, space);
                    else if (space.owner !== player.id) { payRent(player, space, allPlayers[space.owner]); setTimeout(nextTurn, 100); }
                    else { setTimeout(nextTurn, 100); }
                    break;
                case 'chance': drawChanceCard(player, allPlayers); break;
                case 'tax': player.money -= space.amount; addLog(`${player.name} は税金 ¥${space.amount.toLocaleString()} を支払います。`); updateUI(); setTimeout(nextTurn, 100); break;
                case 'go_to_jail': goToJail(player); setTimeout(nextTurn, 100); break;
                default: setTimeout(nextTurn, 100); break;
            }
            updateUI();
        }
        function promptToBuy(player, space) {
            if (player.money < space.price) { addLog(`${player.name} はお金が足りず ${space.name} を買えません。`); setTimeout(nextTurn, 100); return; }
            if (player.type === 'human') {
                DOM.actionpanel.classList.remove('hidden'); DOM.actiontitle.textContent = `「${space.name}」を購入しますか？`; DOM.actiontext.textContent = `価格: ¥${space.price.toLocaleString()}`;
                DOM.actionbuybtn.onclick = () => { buyProperty(player, space); DOM.actionpanel.classList.add('hidden'); setTimeout(nextTurn, 100); };
                DOM.actionpassbtn.onclick = () => { addLog(`${player.name} は購入を見送りました。`); DOM.actionpanel.classList.add('hidden'); setTimeout(nextTurn, 100); };
            } else { setTimeout(() => { if (player.money > space.price * 3) buyProperty(player, space); else addLog(`🤖 ${player.name} は ${space.name} の購入を見送りました。`); setTimeout(nextTurn, 100); }, 1000); }
        }
        function buyProperty(player, space) { player.money -= space.price; player.properties.push(boardData.indexOf(space)); space.owner = player.id; addLog(`<span style="color:${player.color}">${player.name}</span> が <strong>${space.name}</strong> を購入しました！`); updateUI(); }
        function payRent(payer, space, owner) {
            let rent;
            if (space.houses > 0) rent = space.rentLevels[space.houses];
            else if (space.type === 'utility') rent = (parseInt(DOM.dice1.textContent) + parseInt(DOM.dice2.textContent)) * (owner.properties.filter(p_idx => boardData[p_idx].type === 'utility').length === 1 ? 400 : 1000);
            else if (space.type === 'railroad') rent = 2500 * Math.pow(2, owner.properties.filter(p_idx => boardData[p_idx].type === 'railroad').length - 1);
            else rent = space.rentLevels[0];
            payer.money -= rent; owner.money += rent; addLog(`<span style="color:${payer.color}">${payer.name}</span> は <span style="color:${owner.color}">${owner.name}</span> にレンタル料 ¥${rent.toLocaleString()} を支払った。`); updateUI();
        }
        function drawChanceCard(player, allPlayers) {
            const card = chanceCards[Math.floor(Math.random() * chanceCards.length)]; addLog(`<strong>チャンス！</strong> ${player.name}: ${card.text}`);
            card.action(player, allPlayers); updateUI();
            if (!card.text.includes('進む') && !card.text.includes('戻る')) setTimeout(nextTurn, 100);
        }
        function goToJail(player) { addLog(`${player.name} は刑務所へ！`); player.position = 10; player.inJail = true; player.jailTurns = 0; movePlayerToken(player); }
        function advanceToNearest(player, type, allPlayers) {
            let pos = player.position;
            while (true) {
                pos = (pos + 1) % 40;
                if (boardData[pos].type === type) { moveTo(player, pos, true); addLog(`${player.name} は一番近い ${boardData[pos].name} に進みました。`); handleLanding(player, allPlayers); return; }
            }
        }
        function showPropertyModal(spaceIndex) {
            const space = boardData[spaceIndex]; DOM.modalpropertyname.textContent = space.name; DOM.modalcolorbar.style.backgroundColor = space.color || 'transparent';
            let infoHTML = '';
            if (space.price) {
                const owner = space.owner >= 0 ? players[space.owner] : null;
                infoHTML += `<p><strong>価格:</strong> ¥${space.price.toLocaleString()}</p>`;
                infoHTML += owner ? `<p><strong>所有者:</strong> <span style="color:${owner.color}; font-weight: bold;">${owner.name}</span></p>` : `<p><strong>所有者:</strong> なし</p>`;
                if (space.rentLevels) { infoHTML += `<p><strong>レンタル料:</strong> ¥${space.rentLevels[space.houses].toLocaleString()}</p>`; infoHTML += `<p class="text-xs"> (家1: ¥${space.rentLevels[1]}, 2: ¥${space.rentLevels[2]}, 3: ¥${space.rentLevels[3]}, 4: ¥${space.rentLevels[4]}, H: ¥${space.rentLevels[5]})</p>`; infoHTML += `<p><strong>建築コスト:</strong> ¥${space.houseCost.toLocaleString()}</p>`; }
                else if (space.type === 'railroad') infoHTML += `<p><strong>レンタル料:</strong> 所有数に応じて変動</p>`;
                else if (space.type === 'utility') infoHTML += `<p><strong>レンタル料:</strong> サイコロの目に応じて変動</p>`;
            } else infoHTML += `<p>${space.type}マスです。</p>`;
            DOM.modalpropertyinfo.innerHTML = infoHTML; DOM.propertymodal.classList.remove('hidden');
        }
        function checkGameOver() {
            if (isGameOver) return;
            const activePlayers = players.filter(p => p.money >= 0);
            if (activePlayers.length <= 1) {
                isGameOver = true; const winner = activePlayers.length === 1 ? activePlayers[0] : null; let title, text;
                if (winner) { title = `${winner.name} の勝利！`; text = `${winner.name} が最後の勝者となりました！`; DOM.turnindicator.style.color = winner.color; }
                else { title = "引き分け！"; text = "勝者がいませんでした。"; }
                DOM.turnindicator.textContent = title; DOM.rolldicebtn.disabled = true; DOM.actionpanel.classList.remove('hidden');
                DOM.actiontitle.textContent = "ゲーム終了！"; DOM.actiontext.textContent = text; DOM.actionbuybtn.style.display = 'none';
                DOM.actionpassbtn.textContent = 'もう一度プレイ'; DOM.actionpassbtn.onclick = () => window.location.reload();
            }
        }

        // --- Build Logic ---
        function openManageAssetsModal() {
            const player = players[0]; DOM.assetgroupscontainer.innerHTML = '';
            const groupedProperties = {};
            player.properties.forEach(p_idx => { const prop = boardData[p_idx]; if (!prop.color) return; if (!groupedProperties[prop.color]) groupedProperties[prop.color] = []; groupedProperties[prop.color].push(prop); });
            for(const color in groupedProperties) {
                const group = groupedProperties[color]; const allPropsOfColor = boardData.filter(p => p.color === color); const isMonopoly = group.length === allPropsOfColor.length;
                const groupDiv = document.createElement('div'); groupDiv.className = 'p-2 border rounded'; groupDiv.style.borderColor = color; let propertiesHTML = ''; let minHouses = 5;
                if (isMonopoly) { minHouses = Math.min(...group.map(p => p.houses)); }
                group.forEach(prop => {
                    const propIndex = boardData.indexOf(prop); let buildButton = '';
                    if (isMonopoly && prop.houses < 5 && prop.houses <= minHouses) {
                        const cost = prop.houseCost; const action = prop.houses < 4 ? '家を建てる' : 'ホテルを建てる';
                         if (player.money >= cost) { buildButton = `<button class="build-btn text-xs bg-green-500 text-white px-2 py-1 rounded" data-pidx="${propIndex}">+ ${action} (¥${cost})</button>`; }
                    }
                    propertiesHTML += `<div class="flex justify-between items-center p-1"><span>${prop.name} (家: ${prop.houses === 5 ? 'H' : prop.houses})</span> ${buildButton}</div>`;
                });
                groupDiv.innerHTML = `<h4 class="font-bold" style="color:${color}">独占状態: ${isMonopoly ? 'はい' : 'いいえ'}</h4>${propertiesHTML}`; DOM.assetgroupscontainer.appendChild(groupDiv);
            }
            DOM.assetgroupscontainer.querySelectorAll('.build-btn').forEach(btn => btn.addEventListener('click', handleBuildHouse)); DOM.manageassetsmodal.classList.remove('hidden');
        }
        function handleBuildHouse(event) {
            const player = players[0]; const propIndex = parseInt(event.target.dataset.pidx); const prop = boardData[propIndex];
            if (player.money >= prop.houseCost && prop.houses < 5) {
                player.money -= prop.houseCost; prop.houses++; addLog(`${player.name}が${prop.name}に${prop.houses === 5 ? 'ホテル' : '家'}を建てました。`);
                openManageAssetsModal(); updateUI();
            } else { addLog('建築資金が足りません。'); }
        }
        
        // --- Trade Logic ---
        function openTradeModal(targetPlayerId) {
            tradePartnerId = parseInt(targetPlayerId); const player = players[0]; const partner = players[tradePartnerId];
            DOM.trademodaltitle.textContent = `${partner.name} との交渉`; DOM.tradecpuresponse.classList.add('hidden'); DOM.trademessage.value = '';
            const populateList = (element, owner) => {
                element.innerHTML = ''; if (owner.properties.length === 0) { element.innerHTML = '<p class="text-gray-500">所有物件なし</p>'; return; }
                owner.properties.forEach(p_idx => { const prop = boardData[p_idx]; element.innerHTML += `<label><input type="checkbox" data-pidx="${p_idx}" name="trade_prop_${owner.id}"> <span style="color:${prop.color || '#333'}">${prop.name}</span></label>`; });
            };
            populateList(DOM.tradeyourproperties, player); populateList(DOM.tradetheirproperties, partner);
            DOM.tradeyourmoney.value = 0; DOM.tradeyourmoney.max = player.money; DOM.tradetheirmoney.value = 0; DOM.tradetheirmoney.max = partner.money;
            DOM.trademodal.classList.remove('hidden');
        }
        async function handleTradeProposal() {
            DOM.tradeproposebtn.disabled = true; DOM.tradeproposebtn.textContent = 'AIが考慮中...'; DOM.tradecpuresponse.classList.add('hidden');
            const player = players[0]; const partner = players[tradePartnerId];
            const getSelectedProps = (name) => Array.from(document.querySelectorAll(`input[name="${name}"]:checked`)).map(cb => parseInt(cb.dataset.pidx));
            const yourOffer = { properties: getSelectedProps('trade_prop_0'), money: parseInt(DOM.tradeyourmoney.value) };
            const theirOffer = { properties: getSelectedProps(`trade_prop_${tradePartnerId}`), money: parseInt(DOM.tradetheirmoney.value) };
            try {
                const llmResponse = await getLlmNegotiationResponse(player, partner, yourOffer, theirOffer, DOM.trademessage.value);
                DOM.tradecpuresponse.innerHTML = `<p class="font-bold">${partner.name}の返答:</p><p>${llmResponse.response_text}</p>`; DOM.tradecpuresponse.classList.remove('hidden');
                if (llmResponse.decision === 'accept') { addLog(`交渉成立！ ${partner.name}は提案を受け入れた。`); executeTrade(player, partner, yourOffer, theirOffer); DOM.trademodal.classList.add('hidden');
                } else if (llmResponse.decision === 'reject') addLog(`交渉決裂！ ${partner.name}は提案を拒否した。`);
                else if (llmResponse.decision === 'counter') addLog(`${partner.name}が新たな条件を提示してきた。`);
            } catch (error) { console.error("LLM negotiation failed:", error); DOM.tradecpuresponse.textContent = "エラーが発生しました。"; DOM.tradecpuresponse.classList.remove('hidden');
            } finally {
                DOM.tradeproposebtn.disabled = false; DOM.tradeproposebtn.textContent = '提案する';
                if (isCounteringCpuOffer) {
                    isCounteringCpuOffer = false;
                    DOM.trademodal.classList.add('hidden');
                    const cpu = players[currentPlayerIndex];
                    setTimeout(() => { addLog(`🤖 ${cpu.name} がサイコロを振ります...`); rollDiceAndMove(cpu); }, 1000);
                }
            }
        }
        function executeTrade(player, partner, playerOffer, partnerOffer) {
            player.money = player.money - playerOffer.money + partnerOffer.money; partner.money = partner.money + playerOffer.money - partnerOffer.money;
            player.properties = player.properties.filter(p => !playerOffer.properties.includes(p)); partner.properties = partner.properties.filter(p => !partnerOffer.properties.includes(p));
            player.properties.push(...partnerOffer.properties); partner.properties.push(...playerOffer.properties);
            playerOffer.properties.forEach(p_idx => boardData[p_idx].owner = partner.id); partnerOffer.properties.forEach(p_idx => boardData[p_idx].owner = player.id);
            updateUI();
        }
        async function getLlmNegotiationResponse(player, partner, playerOffer, partnerOffer, message) {
            console.log("Simulating LLM API Call for human->cpu trade...");
            const playerOfferValue = playerOffer.properties.reduce((sum, p_idx) => sum + boardData[p_idx].price, 0) + playerOffer.money;
            const partnerOfferValue = partnerOffer.properties.reduce((sum, p_idx) => sum + boardData[p_idx].price, 0) + partnerOffer.money;
            return new Promise(resolve => {
                setTimeout(() => {
                    if (playerOfferValue >= partnerOfferValue * 1.2) resolve({ decision: 'accept', response_text: '素晴らしいご提案ですね！その条件、ぜひ受け入れさせていただきます。', });
                    else if (playerOfferValue >= partnerOfferValue * 0.8) resolve({ decision: 'counter', response_text: `うーん、悪くないですが、少し厳しいですね。もし、あなたからあと${Math.floor((partnerOfferValue - playerOfferValue)*1.1)}円いただければ考えますよ。`, });
                    else resolve({ decision: 'reject', response_text: '申し訳ありませんが、その条件では到底受け入れられません。もっと良い提案をお願いします。', });
                }, 1500);
            });
        }
        
        // --- CPU-initiated Trade Logic ---
        async function cpuCheckForTrade(cpu) {
            for (const color of Object.keys(getColorGroups())) {
                const group = getColorGroups()[color];
                const myPropsInGroup = cpu.properties.filter(p_idx => boardData[p_idx].color === color);
                
                if (myPropsInGroup.length > 0 && myPropsInGroup.length === group.length - 1) { // CPU needs one more property for a monopoly
                    const neededPropIdx = group.find(p_idx => !myPropsInGroup.includes(p_idx));
                    const neededProp = boardData[neededPropIdx];
                    if (neededProp.owner < 0) continue; // Property is unowned
                    const targetPlayer = players[neededProp.owner];

                    if (targetPlayer && targetPlayer.id !== cpu.id) {
                        const offerValue = Math.floor(neededProp.price * 1.2); // Offer 20% more than face value
                        const offer = { properties: [], money: offerValue };
                        const request = { properties: [neededPropIdx], money: 0 };
                        
                        if (cpu.money > offerValue) {
                            return { shouldTrade: true, targetPlayer, offer, request };
                        }
                    }
                }
            }
            return { shouldTrade: false };
        }

        function handleCpuToCpuTrade(offeringCpu, targetCpu, offer, request) {
            const offerValue = offer.properties.reduce((s, p) => s + boardData[p].price, 0) + offer.money;
            const requestValue = request.properties.reduce((s, p) => s + boardData[p].price, 0) + request.money;

            addLog(`🤖 <span style="color:${offeringCpu.color};">${offeringCpu.name}</span> が <span style="color:${targetCpu.color};">${targetCpu.name}</span> に交渉を持ちかけました...`);

            if (targetCpu.money < 0) {
                 addLog(`しかし、<span style="color:${targetCpu.color};">${targetCpu.name}</span>は破産しているため交渉できません。`);
                 return;
            }

            if (offerValue > requestValue * 1.1) { // Target CPU accepts if offer is >10% better
                setTimeout(() => {
                    addLog(`交渉成立！ <span style="color:${targetCpu.color};">${targetCpu.name}</span> は <span style="color:${offeringCpu.color};">${offeringCpu.name}</span> の提案を受け入れました。`);
                    executeTrade(offeringCpu, targetCpu, offer, request);
                }, 1000);
            } else {
                setTimeout(() => {
                    addLog(`交渉決裂！ <span style="color:${targetCpu.color};">${targetCpu.name}</span> は <span style="color:${offeringCpu.color};">${offeringCpu.name}</span> の提案を拒否しました。`);
                }, 1000);
            }
        }

        function presentCpuOfferToPlayer(cpu, player, offer, request) {
            activeCpuOffer = { cpu, player, offer, request };
            DOM.cpuoffertitle.textContent = `${cpu.name}からの交渉提案`;
            DOM.cpuoffertext.textContent = `「${boardData[request.properties[0]].name}」を独占したいようです。以下の条件で交換しませんか？`;
            
            const formatAssets = (assets) => `<ul>${assets.properties.map(p=>`<li>${boardData[p].name}</li>`).join('')}</ul> <p>現金: ¥${assets.money.toLocaleString()}</p>`;
            DOM.cpuofferrequest.innerHTML = formatAssets(request);
            DOM.cpuofferproposal.innerHTML = formatAssets(offer);
            
            DOM.cpuoffermodal.classList.remove('hidden');
        }
        
        function resumeCpuTurn(cpu) {
             setTimeout(() => {
                addLog(`🤖 ${cpu.name} がサイコロを振ります...`);
                rollDiceAndMove(cpu);
            }, 1000);
        }

        function handleCpuOfferAccept() {
            if (!activeCpuOffer) return;
            const { cpu, player, offer, request } = activeCpuOffer;
            addLog(`交渉成立！ あなたは ${cpu.name} の提案を受け入れました。`);
            executeTrade(cpu, player, offer, request);
            DOM.cpuoffermodal.classList.add('hidden');
            const originalCpu = activeCpuOffer.cpu;
            activeCpuOffer = null;
            resumeCpuTurn(originalCpu);
        }

        function handleCpuOfferReject() {
            if (!activeCpuOffer) return;
            const { cpu } = activeCpuOffer;
            addLog(`交渉決裂！ あなたは ${cpu.name} の提案を拒否しました。`);
            DOM.cpuoffermodal.classList.add('hidden');
            const originalCpu = activeCpuOffer.cpu;
            activeCpuOffer = null;
            resumeCpuTurn(originalCpu);
        }

        function handleCpuOfferCounter() {
            if (!activeCpuOffer) return;
            const { cpu } = activeCpuOffer;
            DOM.cpuoffermodal.classList.add('hidden');
            isCounteringCpuOffer = true;
            openTradeModal(cpu.id);
        }
        
        function handleTradeCancel() {
            DOM.trademodal.classList.add('hidden');
            if (isCounteringCpuOffer) {
                isCounteringCpuOffer = false;
                const cpu = players[currentPlayerIndex];
                addLog(`再提案を取りやめ、${cpu.name}のターンを続行します。`);
                resumeCpuTurn(cpu);
            }
        }
        
        function getColorGroups() {
            const groups = {};
            boardData.forEach((p, i) => {
                if (p.color) {
                    if (!groups[p.color]) groups[p.color] = [];
                    groups[p.color].push(i);
                }
            });
            return groups;
        }

        // --- Start Game ---
        window.onload = initGame;
    </script>
</body>
</html>
